version: 2.1

docker_anchor: &docker_node
  docker:
    - image: cimg/node:13.8.0

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-envs:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-backendinfra-<< parameters.workflow_id >>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontendinfra-<< parameters.workflow_id >>"

jobs:
  build-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  build-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  test-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  test-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  scan-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: scan frontend for vunerebility
          command: |
            cd frontend
            npm i --package-lock-only
            npm audit fix --audit-level=critical --force
            npm audit --audit-level critical
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  scan-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: scan backend for vunerebility
          command: |
            cd backend
            # npm i --package-lock-only
            # npm audit fix --audit-level=critical --force
            # npm audit
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1f

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infra exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backendinfra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infra exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontendinfra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output=text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-envs

  configure-infrastructure:
    docker:
      - image: willhallonline/ansible:2.13-ubuntu-22.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e6:9f:36:3b:42:55:2a:df:7b:1a:44:a3:57:65:8b:6e"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires:
      #       - build-backend
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
