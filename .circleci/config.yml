version: 2.1

docker_anchor: &docker_node
  docker:
    - image: cimg/node:13.8.0

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-envs:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-backendinfra-<< parameters.workflow_id >>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontendinfra-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
    # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable 
            SUCCESS=$(curl --insecure https://kvdb.io/2iE8WfdzgLf2FqKXWTkj2C/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  build-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  test-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  test-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  scan-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: scan frontend for vunerebility
          command: |
            cd frontend
            npm i --package-lock-only
            npm audit fix --audit-level=critical --force
            npm audit --audit-level critical
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1

  scan-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: scan backend for vunerebility
          command: |
            cd backend
            # npm i --package-lock-only
            # npm audit fix --audit-level=critical --force
            # npm audit
      - slack/notify:
          mentions: "@damilola"
          event: fail
          template: basic_fail_1f

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infra exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backendinfra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infra exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontendinfra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output=text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-envs

  configure-infrastructure:
    docker:
      - image: willhallonline/ansible:2.13-ubuntu-22.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e6:9f:36:3b:42:55:2a:df:7b:1a:44:a3:57:65:8b:6e"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    <<: *docker_node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/2iE8WfdzgLf2FqKXWTkj2C/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy-frontend:
    <<: *docker_node
    steps:
      - checkout
      - run:
          name: Install python3
          command: |
            sudo apt update
            sudo apt install -y python3
      - run:
          name: Install awscli
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
      - destroy-envs

  deploy-backend:
    docker:
      - image: willhallonline/ansible:2.13-ubuntu-22.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e6:9f:36:3b:42:55:2a:df:7b:1a:44:a3:57:65:8b:6e"
      - attach_workspace:
          at: ~/
      - run:
          name: Install python3
          command: |
            sudo apt update
            sudo apt install -y python3
      - run:
          name: Install awscli
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-envs

      # Here's where you will add some code to rollback on failure
  
  smoke-test:
    <<: *docker_node
    steps:
      - checkout
      - run:
          name: Install python3
          command: |
            sudo apt update
            sudo apt install -y python3
      - run:
          name: Install awscli
          command: |
            sudo apt update
            sudo apt install -y awscli
       - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires:
      #       - build-backend
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
